{"data":{"Article":{"html":"<h2>Installing Dependencies</h2>\n<h3>PostgreSQL &#x26; Redis</h3>\n<p>Refer to the documentation of Python (2.7), PostgreSQL (9.3 or newer), Redis (2.8.3 or newer) and Node.js (v6 or newer) on how to install them in your environment. On macOS, you can use <code>brew</code> to install them. On Linux you can use your package manager, although need to make sure it installs recent enough versions.</p>\n<h3>Python Packages</h3>\n<p>For development the minimum required packages to install are described in:</p>\n<ul>\n<li>requirements.txt</li>\n<li>requirements_dev.txt</li>\n</ul>\n<p>You install them with pip:</p>\n<pre><code class=\"language-bash\">pip install -r requirements.txt -r requirements_dev.txt\n</code></pre>\n<p>(We recommend installing them in a virtualenv. For using some data source types, you need to install additional dependencies from requirements<em>all</em>ds.txt.)</p>\n<h3>Node.js Packages</h3>\n<p>Install all packages with:</p>\n<pre><code class=\"language-bash\">npm install\n</code></pre>\n<p>First time build assets:</p>\n<pre><code class=\"language-bash\">npm run build\n</code></pre>\n<h2>Configuration</h2>\n<p>For development, in most cases the default configuration is enough. But if you need\nto adjust the database configuration, mail settings or any <a href=\"../admin-guide/env-vars-settings.md\">other setting</a>,\nyou do so with environment variables.</p>\n<p>To avoid having to export those variables manually, you can use a <code>.env</code> file and\nthe <code>bin/run</code> helper script. By invoking any command with <code>bin/run</code> prefix, it will\nload your environment variables from the <code>.env</code> file and then run your command. For\nexample:</p>\n<pre><code class=\"language-bash\">bin/run ./manage.py check_settings\n</code></pre>\n<h2>Creating Database Tables</h2>\n<pre><code class=\"language-bash\">bin/run ./manage.py database create_tables\n</code></pre>\n<h2>Processes</h2>\n<p>The main Redash processes you have to run:</p>\n<ul>\n<li>Web server</li>\n<li>Celery worker(s) &#x26; scheduler</li>\n</ul>\n<p>In development you will also run Webpack's dev server or watch utility.</p>\n<p>Our recommendation:</p>\n<ul>\n<li>Web server: <code>bin/run ./manage.py runserver --debugger --reload</code></li>\n<li>Celery: <code>./bin/run celery worker --app=redash.worker --beat -Qscheduled_queries,queries,celery -c2</code></li>\n<li>Webpack dev server: <code>npm run start</code></li>\n</ul>\n<p>This will result in a Flask web server listening on port <code>5000</code>, Webpack dev server\non port <code>8080</code> and 2 Celery workers ready to run queries.</p>\n<p>To open the app in your web browser, use Webpack's dev server -- <code>localhost:8080</code>,\nwhich will auto reload and refresh whenever you make changes to the frontend code.</p>\n<h2>Running Tests</h2>\n<p>Currently we currently have tests only for the backend code. To run them invoke:</p>\n<pre><code class=\"language-bash\">pytest tests/\n</code></pre>","frontmatter":{"permalink":null,"title":"Developer Installation Guide","description":null,"keywords":null,"parent_category":"open-source","category":"dev-guide","toc":null,"layout":null,"hide_topics":null},"parent":{"__typename":"File","relativePath":"kb/open-source/dev-guide/setup.md"}},"Parent":{"frontmatter":{"title":"Developer Guide"}},"Section":{"name":"Open Source & Self Hosted"}},"pageContext":{"category":"dev-guide","parent_category":"open-source","slug":"setup"}}