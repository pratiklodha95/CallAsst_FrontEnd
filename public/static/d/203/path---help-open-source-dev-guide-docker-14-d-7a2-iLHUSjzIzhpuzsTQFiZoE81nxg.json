{"data":{"Article":{"html":"<h2>Installing Docker, Docker Compose and Node.js</h2>\n<p>We will use Docker to run all the services needed for Redash, except for Node.js\nwhich we will run locally.</p>\n<ol>\n<li><a href=\"https://docs.docker.com/engine/installation/\">Install Docker and Docker Compose</a>.</li>\n<li><a href=\"https://nodejs.org/en/download/\">Install Node.js</a> (latest LTS or later is recommended, can be installed with Homebrew on OS/X)</li>\n</ol>\n<h2>Setup</h2>\n<h3>Clone the Git repository</h3>\n<p>First you will need to clone the Git repository:</p>\n<pre><code class=\"language-bash\">git clone https://github.com/getredash/redash.git\ncd redash/\n</code></pre>\n<h3>Create Docker Services</h3>\n<p>Once you have the above setup, you need to create the Docker services:</p>\n<pre><code class=\"language-bash\">docker-compose up -d\n</code></pre>\n<p>This will build the Docker images and fetch some prebuilt images and then start the services\n(Redash web server, worker, PostgreSQL and Redis). You can refer to the <code>docker-compose.yml</code>\nfile to see the full configuration.</p>\n<h3>Install npm Packages</h3>\n<pre><code class=\"language-bash\">npm install\n</code></pre>\n<h3>Create Database</h3>\n<pre><code class=\"language-bash\"># Create tables\ndocker-compose run --rm server create_db\n\n# Create database for tests\ndocker-compose run --rm postgres psql -h postgres -U postgres -c \"create database tests\"\n</code></pre>\n<h2>Usage</h2>\n<h3>Run webpack Dev Server</h3>\n<p>Once all Docker services are running (can be started either by <code>docker-compose up</code> or\n<code>docker-compose start</code>), Redash is available at <code>http://localhost:5000/</code>.</p>\n<p>While we will use webpack's dev server, we still need to build the frontend assets at least once, as some of them used for static pages (login page and such):</p>\n<pre><code class=\"language-bash\">npm run build\n</code></pre>\n<p>To work on the frontend code, you need to use the webpack dev server, which you start with:</p>\n<pre><code class=\"language-bash\">npm run start\n</code></pre>\n<p>Now the dev server is available at <code>http://localhost:8080</code>. It rebuilds the frontend\ncode when you change it and refreshes the browser. All the API calls are proxied to\n<code>localhost:5000</code> (the server running in Docker).</p>\n<h3>Restarting Celery Workers</h3>\n<p>The Web server will restart on code changes, but the Celery workers won't. To restart\nthe Celery workers run:</p>\n<pre><code>docker-compose restart worker\n</code></pre>\n<p>(or just stop all the running services with <code>docker-compose stop</code> then run them again\nwith <code>docker-compose up -d</code>)</p>\n<h3>Installing new Python packages (requirements.txt)</h3>\n<p>If you pulled a new version with new packages or added some yourself, you will need to\nrebuild the <code>server</code> and <code>worker</code> images:</p>\n<pre><code class=\"language-bash\">docker-compose build worker\ndocker-compose build server\n</code></pre>\n<h3>Running Tests</h3>\n<pre><code class=\"language-bash\">docker-compose run --rm server tests\n</code></pre>\n<p>Before running tests for the first time, you need to create a database for tests:</p>\n<pre><code class=\"language-bash\">docker-compose run --rm postgres psql -h postgres -U postgres -c \"create database tests;\"\n</code></pre>\n<h3>Debugging</h3>\n<p>See <a href=\"%7B%25%20link%20_kb/open-source/dev-guide/debugging.md%20%25%7D\">Debugging a Redash Server on Docker Using Visual Studio Code</a></p>\n<h2>Configuration</h2>\n<p>TBD.</p>","frontmatter":{"permalink":null,"title":"Docker Based Developer Installation Guide","description":null,"keywords":null,"parent_category":"open-source","category":"dev-guide","toc":null,"layout":null,"hide_topics":null},"parent":{"__typename":"File","relativePath":"kb/open-source/dev-guide/docker.md"}},"Parent":{"frontmatter":{"title":"Developer Guide"}},"Section":{"name":"Open Source & Self Hosted"}},"pageContext":{"category":"dev-guide","parent_category":"open-source","slug":"docker"}}