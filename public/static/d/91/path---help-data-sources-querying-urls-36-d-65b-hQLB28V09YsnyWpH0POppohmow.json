{"data":{"Article":{"html":"<p>Sometimes you need to visualize data not contained in an RDBMS or NOSQL data store. For those times, Redash provides two URL-based mechanisms to pull in your data: <code>URL</code> and <code>JSON</code>. Either source can be added from the settings screen in Redash.</p>\n<p>{% callout info %}</p>\n<p>The <code>JSON</code> data source is currently only available as part of SaaS Redash. This page will be updated when it is added to the Open Source version as well. This is expected in the next major version release (version 8).</p>\n<p>{% endcallout %}</p>\n<p>With <code>URL</code>, you can load large amounts of tabular data while abstracting away the underlying storage mechanism. This data source allows you to explicitly declare the types of data returned (text, dates, numbers e.g.).</p>\n<p>{% callout warning %}\nThe features of the <code>URL</code> data source will eventually be rolled into the <code>JSON</code> data source. At that time, the <code>URL</code> data source will be deprecated and this documentation will be updated. For future development we recommend using the <code>JSON</code> data source.\n{% endcallout %}</p>\n<p>Now you can use the <code>JSON</code> data source for tabular data, non-tabular data, or API's where you do not control the underlying data structure. Redash treats all incoming data from the <code>JSON</code> data source as text; so you should be prepared to use <a href=\"%7B%25%20link%20_kb/user-guide/visualizations/table-visualizations.md%20%25%7D\">table formatting</a> when rendering the data.</p>\n<p>{% callout info %}\nIf the server behind your <code>URL</code> data source requires HTTP authentication headers, you can enter them during data source setup. For the <code>JSON</code> data source, authentication must be explicitly passed in your queries.\n{% endcallout %}</p>\n<h1>URL</h1>\n<p>The <code>URL</code> data source expects your endpoints to return tabular data in <a href=\"https://json.org\">JSON format</a>.</p>\n<h2>Usage</h2>\n<p>The body of your query will include only the URL that returns data, for example:</p>\n<pre><code class=\"language-sql\">http://myserver/path/myquery\n</code></pre>\n<p>To manipulate the data (filter, sort, aggregate etc.) you can use the <a href=\"%7B%25%20link%20_kb/user-guide/querying/query-results-data-source.md%20%25%7D\">Query Results Data Source</a>.</p>\n<h2>Required Format</h2>\n<p>The returned object must expose two keys: <code>columns</code> and <code>rows</code>.</p>\n<ul>\n<li>\n<p>The <code>columns</code> key should expose an array of javascript objects describing the columns to be included in your data set. Each object will include three keys:</p>\n<ul>\n<li><code>name</code></li>\n<li><code>type</code></li>\n<li><code>friendly_name</code></li>\n</ul>\n</li>\n<li>\n<p><code>rows</code> should return an array of javascript objects representing each row of data. The keys for each object should match the <code>name</code> keys described in your <code>columns</code> array.</p>\n</li>\n</ul>\n<p>The following data types are supported for columns:</p>\n<ul>\n<li>text</li>\n<li>integer</li>\n<li>float</li>\n<li>boolean</li>\n<li>string</li>\n<li>datetime</li>\n<li>date</li>\n</ul>\n<p>An example of returned data appears below:</p>\n<pre><code>{\n  \"columns\": [\n    {\n      \"name\": \"date\",\n      \"type\": \"date\",\n      \"friendly_name\": \"date\"\n    },\n    {\n      \"name\": \"day_number\",\n      \"type\": \"integer\",\n      \"friendly_name\": \"day_number\"\n    },\n    {\n      \"name\": \"value\",\n      \"type\": \"integer\",\n      \"friendly_name\": \"value\"\n    },\n    {\n      \"name\": \"total\",\n      \"type\": \"integer\",\n      \"friendly_name\": \"total\"\n    }\n  ],\n  \"rows\": [\n    {\n      \"value\": 40832,\n      \"total\": 53141,\n      \"day_number\": 0,\n      \"date\": \"2014-01-30\"\n    },\n    {\n      \"value\": 27296,\n      \"total\": 53141,\n      \"day_number\": 1,\n      \"date\": \"2014-01-30\"\n    },\n    {\n      \"value\": 22982,\n      \"total\": 53141,\n      \"day_number\": 2,\n      \"date\": \"2014-01-30\"\n    }\n  ]\n}\n</code></pre>\n<h1>JSON</h1>\n<p>Use the <code>JSON</code> Data Source to query arbitrary JSON API's. Setup is easy because no authentication is needed. Any RESTful JSON API will handle authentication through HTTP headers. So just create a new Data Source of type <code>JSON</code> and name it whatever you like (\"JSON\" is a good choice).</p>\n<h2>Usage</h2>\n<p>This Data Source takes queries in <a href=\"https://www.tutorialspoint.com/yaml/yaml_basics.htm\">YAML format</a>. Here's some examples using the GitHub API:</p>\n<h3>Return a list of objects from an endpoint</h3>\n<pre><code class=\"language-yaml\">url: https://api.github.com/repos/getredash/redash/issues\n</code></pre>\n<p>This will return the result of the above API call as is.</p>\n<p><img src=\"/assets/images/docs/gitbook/json_list_of_objects.png\"></p>\n<h3>Return a single object</h3>\n<pre><code class=\"language-yaml\">url: https://api.github.com/repos/getredash/redash\n</code></pre>\n<p>The above API call returns a single object, and this object is being converted to a row.</p>\n<p><img src=\"/assets/images/docs/gitbook/json_single_object.png\" alt=\"Single JSON Object\"></p>\n<h3>Return Specific Fields</h3>\n<p>In case you want to pick only specific fields from the resulting object(s), you can pass the <code>fields</code> option:</p>\n<pre><code class=\"language-yaml\">url: https://api.github.com/repos/getredash/redash/issues\nfields: [number, title]\n</code></pre>\n<p><img src=\"/assets/images/docs/gitbook/json_field_select.png\"></p>\n<h3>Return an inner object</h3>\n<p>Many JSON API's can return nested objects. You can access a nested object with the <code>path</code> key.</p>\n<pre><code class=\"language-yaml\">url: https://api.github.com/repos/getredash/redash/issues/3495\npath: assignees\n</code></pre>\n<p>The above query will use the <code>assignee</code> objects from the API result as the query result.</p>\n<h3>Pass query string parameters</h3>\n<p>You can either craft your own URLs, or you can pass the <code>params</code> option:</p>\n<pre><code class=\"language-yaml\">url: \"https://api.github.com/search/issues\"\nparams:\n  q: is:open type:pr repo:getredash/redash\n  sort: created\n  order: desc\n</code></pre>\n<p>The above is the same as:</p>\n<pre><code class=\"language-yaml\">url: \"https://api.github.com/search/issues?q=+is:open+type:pr+repo:getredash/redash&#x26;sort=created&#x26;order=desc\"\n</code></pre>\n<h3>Additional HTTP Options</h3>\n<p>You can pass additional keys to modify various HTTP options:</p>\n<ul>\n<li><code>method</code> - the HTTP method to use (default: <code>get</code>)</li>\n<li><code>headers</code> - a dictionary of headers to send with the request</li>\n<li><code>auth</code> - basic authentication username/password (should be passed as an array: <code>[username, password]</code>)</li>\n<li><code>params</code> - a dictionary of query string parameters to add to the URL</li>\n<li><code>data</code> - a dictionary of values to use as request body</li>\n<li><code>json</code> - same as <code>data</code> except that it's being converted to JSON</li>\n</ul>","frontmatter":{"permalink":null,"title":"Querying URLs & JSON APIs","description":null,"keywords":null,"parent_category":"data-sources","category":"querying","toc":true,"layout":null,"hide_topics":null},"parent":{"__typename":"File","relativePath":"kb/data-sources/querying-urls.md"}},"Parent":{"frontmatter":{"title":"Querying"}},"Section":{"name":"Data Sources"}},"pageContext":{"category":"querying","parent_category":"data-sources","slug":"urls"}}